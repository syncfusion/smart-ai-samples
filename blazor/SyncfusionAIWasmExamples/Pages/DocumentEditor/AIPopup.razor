@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Spinner
@using System.ClientModel
@using System.Text.Json
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using PopupsOpenEventArgs = Syncfusion.Blazor.Popups.OpenEventArgs
@using Syncfusion.Blazor.Layouts

@inject AzureAIService OpenAIService
@inject LocalEmbedder embedder

<div id="ai-assist">
    <SfDialog @ref="Dialog" Height="auto" MinHeight="auto" Width="50%" Target="#ai-assist" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisibleDialog">
        <DialogEvents Opened="@onOpen"></DialogEvents>
        <DialogTemplates>
            <Header>
                <h3>@HeaderValue</h3>
            </Header>
            <Content>
                <div class="e-de-parent">
                    <SfSplitter Height="auto" Orientation="Syncfusion.Blazor.Layouts.Orientation.Vertical">
                        <SplitterPanes>
                            <SplitterPane Size="auto" Collapsible="true" Visible="@IsVisibleSplitter">
                                <ContentTemplate>
                                    <div style="height: auto; display: flex; flex-direction: column; justify-content: space-between;">
                                        <div style="padding: 5px; overflow-y: auto; flex-grow: 1;">@EditorInputValue</div>
                                        <div style="padding-bottom: 0px;">
                                            <SfToolbar Width="100%">
                                                <ToolbarItems>
                                                    <ToolbarItem Type="ItemType.Spacer"></ToolbarItem>
                                                    <ToolbarItem TooltipText="Move to the previous paragraph" PrefixIcon="e-icons e-chevron-left-small" OnClick="@MoveToPrevious"></ToolbarItem>
                                                    <ToolbarItem TooltipText="Move to the next paragraph" PrefixIcon="e-icons e-chevron-right-small" OnClick="@MoveToNext"></ToolbarItem>
                                                    <ToolbarItem Type="ItemType.Spacer"></ToolbarItem>
                                                </ToolbarItems>
                                            </SfToolbar>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </SplitterPane>
                            <SplitterPane Size="auto" Collapsible="true">
                                <ContentTemplate>
                                    <div id="e-de-editableDiv" contenteditable="true" @onfocus="OnFocus" @onblur="OnBlur" @oninput="InputChange"></div>
                                </ContentTemplate>
                            </SplitterPane>
                        </SplitterPanes>
                    </SfSplitter>
                    <div id="e-de-fm-toolbar">
                        @if (IsVisibleToolBar)
                        {
                            <SfToolbar Height="auto" Width="100%">
                                <ToolbarItems>
                                    <ToolbarItem TooltipText="Show the previous suggestion" PrefixIcon="e-icons e-chevron-left-small" Disabled="@HideSecIcon" Visible="@ShowPryItem" OnClick="@GetPreSug"></ToolbarItem>
                                    <ToolbarItem Align="ItemAlign.Left" CssClass="page-count" Visible="@ShowPryItem">
                                        <Template>
                                            <SfNumericTextBox Max="100" Min="0" Width="40px" ShowSpinButton=false Value="@CurrentPage" CssClass="e-de-nt-style"></SfNumericTextBox>
                                            <span class="total-page"> of @NumPage</span>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="Show the next suggestion" PrefixIcon="e-icons e-chevron-right-small" Disabled="@HideSecIcon" Visible="@ShowPryItem" OnClick="@GetNxtSug"></ToolbarItem>
                                    <ToolbarItem PrefixIcon="e-icons e-chevron-down-small" Type="ItemType.Input" Visible="@ShowTrnsPryyItem">
                                        <Template>
                                            <SfComboBox Width="160px" TValue="string" TItem="Adjust" @bind-Value="@TranslateValue" DataSource="@TranslateList" Readonly="false" PopupWidth="160px" ShowClearButton="false">
                                                <ComboBoxFieldSettings Value="Text" />
                                            </SfComboBox>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="Show menu to modify the format of the response" PrefixIcon="e-icons e-settings" OnClick="@OnItemStgClick" Visible="@ShowPryItem"></ToolbarItem>
                                    <ToolbarItem TooltipText="Close" PrefixIcon="e-icons e-close" OnClick="@OnItemCancelClick" Visible="@ShowSecnyItem"></ToolbarItem>
                                    <ToolbarItem TooltipText="Set the tone" PrefixIcon="e-icons e-chevron-down-small" Type="ItemType.Input" Visible="@ShowSecnyItem">
                                        <Template>
                                            <SfComboBox Width="125px" TValue="string" TItem="Adjust" @bind-Value="@ToneValue" DataSource="@ToneList" Readonly="false" PopupWidth="125px" ShowClearButton="false">
                                                <ComboBoxFieldSettings Value="Text" />
                                            </SfComboBox>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="Set the format" PrefixIcon="e-icons e-chevron-down-small" Type="ItemType.Input" Visible="@ShowSecnyItem">
                                        <Template>
                                            <SfComboBox Width="200px" TValue="string" TItem="Adjust" @bind-Value="@FormatValue" DataSource="@FormatList" Readonly="false" PopupWidth="200px" ShowClearButton="false">
                                                <ComboBoxFieldSettings Value="Text" />
                                            </SfComboBox>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="Set the length" PrefixIcon="e-icons e-chevron-down-small" Type="ItemType.Input" Visible="@ShowSecnyItem">
                                        <Template>
                                            <SfComboBox Width="100px" TValue="string" TItem="Adjust" @bind-Value="@LengthValue" DataSource="@LengthList" Readonly="false" PopupWidth="110px" ShowClearButton="false">
                                                <ComboBoxFieldSettings Value="Text" />
                                            </SfComboBox>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="@TooltipTextSec" Disabled="@HideIcon" Visible="@ShowSecnyItem">
                                        <Template>
                                            <SfButton CssClass="e-control e-btn" @onclick="@ReGenerate">Rewrite</SfButton>
                                        </Template>
                                    </ToolbarItem>
                                    <ToolbarItem TooltipText="@TooltipText" Text="Translate" Visible="@ShowTrnsPryyItem" OnClick="@Translate"></ToolbarItem>
                                    <ToolbarItem Type="ItemType.Spacer"></ToolbarItem>
                                    <ToolbarItem TooltipText="@TooltipText" Disabled="@HideIcon" Visible="@ShowPryItem">
                                        <Template>
                                            <SfButton CssClass="e-control e-btn" @onclick="@OnReGenerate">@ActionText</SfButton>
                                        </Template>
                                    </ToolbarItem>
                                </ToolbarItems>
                            </SfToolbar>
                        }
                        @if (IsVisibleChips)
                        {
                            <div style="display: flex; justify-content: space-between;">
                                <div style="width: 35%;">
                                    <SfMultiSelect TItem="Grammer" AllowFiltering="true" TValue="string[]" Placeholder="e.g. Spelling Errors" ShowSelectAll=true Mode="VisualMode.CheckBox" DataSource="@Grammers" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search grammar suggestion">
                                        <MultiSelectEvents TItem="Grammer" TValue="string[]" ValueChange="@ValueChangeHandler"></MultiSelectEvents>
                                        <MultiSelectFieldSettings Text="Name" Value="Name"></MultiSelectFieldSettings>
                                    </SfMultiSelect>
                                </div>
                                <div>
                                    <SfButton CssClass="e-control e-btn" @onclick="@OnReCheck">Rewrite</SfButton>
                                </div>
                            </div>
                        }
                    </div>
                    <div>
                        <SfSpinner @bind-Visible="@IsVisibleSpinner" />
                    </div>
                </div>
            </Content>
            <FooterTemplate>
                <SfButton CssClass="e-control e-btn e-primary" Disabled="@HideSecIcon" @onclick="@OnInsert">@ReplaceButtonText</SfButton>
                <SfButton CssClass="e-control e-btn" @onclick="@OnCancel">Cancel</SfButton>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
</div>

<style>
    .e-de-nt-style {
        padding-left: 7.5px;
    }

    .e-de-navigate {
        padding: 0px;
    }

    .e-switch {
        height: 8%;
        width: 15%;
    }

</style>

@code {
    public enum PopupTypeEnum
    {
        Generate,
        Rewrite,
        Translate,
        Grammar
    }

    [Parameter]
    public string PopupType { get; set; } = string.Empty;
    [Parameter]
    public string InputText { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    private PopupTypeEnum CurrentPopupType;
    [Inject]
    private IJSRuntime? JS { get; set; }
    private string EditorInputValue = string.Empty;
    private string ReplaceButtonText = "Replace";
    private bool HideIcon = false;
    private bool HideSecIcon = false;
    private bool IsVisibleSplitter = false;
    private string CROutText = string.Empty;
    private string CRInText = string.Empty;
    List<string> CROutList = new List<string>();
    private bool IsContentGenerte = false;
    private bool IsRephraseContent = false;
    SfDialog? Dialog;
    private string ToneValue = "Professional";
    private string TranslateValue = "French";
    private string FormatValue = "Paragraph";
    private string LengthValue = "Medium";
    private bool IsVisibleDialog { get; set; } = false;
    private bool IsVisibleSpinner = false;
    private string PlcHoldText = "Please provide the topic or idea for content generation...";
    private string HeaderValue = string.Empty;
    private bool ShowPryItem = true;
    private bool ShowSecnyItem = false;
    private bool ShowTrnsPryyItem = false;
    private string NumPage = "0";
    private string ActionText = "Generate";
    private bool IsGrammerCheck = false;
    private string TooltipText = "Generate the new content based on the provided text";
    private string TooltipTextSec = "Rewrite the content based on the provided text";
    public int? CurrentPage { get; set; } = 0;
    private bool IsVisibleToolBar = true;
    private bool IsVisibleChips = false;
    public string[] FilterSelected = { };
    private string DialogValue = string.Empty;
    private string SplitterHeight = "80%";
    private string SplitterPaneHeight = "100%";
    private string DialogHeight = "60%";
    private string PreviousType = string.Empty;
    private List<string> extractedText = new List<string>();
    public Dictionary<string, EmbeddingF32> PageEmbeddings { get; set; }

    public class Grammer
    {
        public string Name { get; set; }
        public string Code { get; set; }
    }

    List<Grammer> Grammers = new List<Grammer>
    {
        new Grammer() { Name = "Subject-Verb Agreement", Code = "SVA" },
        new Grammer() { Name = "Tense Consistency", Code = "TC" },
        new Grammer() { Name = "Pronoun Agreement", Code = "PA" },
        new Grammer() { Name = "Comma Usage", Code = "CU" },
        new Grammer() { Name = "Parallel Structure", Code = "PS" },
        new Grammer() { Name = "Misplaced Modifiers", Code = "MM" },
        new Grammer() { Name = "Dangling Modifiers", Code = "DM" },
        new Grammer() { Name = "Word Choice", Code = "WC" },
        new Grammer() { Name = "edundancy", Code = "R" },
        new Grammer() { Name = "Use of Articles", Code = "UA" },
        new Grammer() { Name = "Punctuation Marks", Code = "PM" },
        new Grammer() { Name = "Apostrophes for Possessives and Contractions", Code = "APC" },
        new Grammer() { Name = "Spelling Errors", Code = "SE" },

    };
    public class Adjust
    {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }
    List<Adjust> ToneList = new List<Adjust> {
        new Adjust() { Text= "Professional" },
        new Adjust() { Text= "Friendly" },
        new Adjust() { Text= "Instructional" },
        new Adjust() { Text= "Marketing" },
        new Adjust() { Text= "Academic" },
        new Adjust() { Text= "Legal" },
        new Adjust() { Text= "Technical" },
        new Adjust() { Text= "Narrative" },
        new Adjust() { Text= "Direct" },
    };
    List<Adjust> FormatList = new List<Adjust> {
        new Adjust() { Text= "Paragraph" },
        new Adjust() { Text= "Blog post" },
        new Adjust() { Text= "Technical Documentation" },
        new Adjust() { Text= "Report" },
        new Adjust() { Text= "Research Papers" },
        new Adjust() { Text= "Tutorial" },
        new Adjust() { Text= "Meeting Notes" },
    };
    List<Adjust> LengthList = new List<Adjust> {
        new Adjust() { Text= "Short" },
        new Adjust() { Text= "Medium" },
        new Adjust() { Text= "Long" }
    };
    List<Adjust> TranslateList = new List<Adjust> {
        new Adjust() { Text= "English" },
        new Adjust() { Text= "Simplified Chinese" },
        new Adjust() { Text= "Spanish" },
        new Adjust() { Text= "French" },
        new Adjust() { Text= "Arabic" },
        new Adjust() { Text= "Portuguese" },
        new Adjust() { Text= "Russian" },
        new Adjust() { Text= "Urdu" },
        new Adjust() { Text= "Indonesian" },
        new Adjust() { Text= "German" },
        new Adjust() { Text= "Japanese" }
    };

    private void ValueChangeHandler(MultiSelectChangeEventArgs<string[]> args)
    {
        string[] addedChipItem = args.Value;
        if (addedChipItem != null && addedChipItem.Length > 0)
        {
            this.FilterSelected = addedChipItem;
        }
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (PopupType != "")
        {
            HandlePopupTypeChange();
            _ = InvokeAsync(async () =>
            {
                await OnChange.InvokeAsync("Clear");
            });
        }
    }
    private void HandlePopupTypeChange()
    {
        if (Enum.TryParse(PopupType, out PopupTypeEnum popupTypeEnum))
        {
            CurrentPopupType = popupTypeEnum;
            switch (CurrentPopupType)
            {
                case PopupTypeEnum.Generate:
                    this.IsVisibleSplitter = false;
                    this.GenerateContent();
                    break;
                case PopupTypeEnum.Grammar:
                    this.IsVisibleSplitter = true;
                    this.SplitterPaneHeight = "50%";
                    this.GrammarCheck();
                    break;
                case PopupTypeEnum.Rewrite:
                    this.IsVisibleSplitter = true;
                    this.RewriteContent();
                    break;
                case PopupTypeEnum.Translate:
                    this.IsVisibleSplitter = true;
                    this.TranslateContent();
                    break;
            }
        }
    }
    private async Task GenerateContent()
    {
        this.ReplaceButtonText = "Insert";
        this.IsVisibleDialog = true;
        this.IsVisibleSpinner = true;
        this.HideIcon = true;
        this.HideSecIcon = true;
        this.EditorInputValue = string.Empty;
        StateHasChanged();
        await this.SetDefValue("gc");
        if (this.InputText != "")
        {
            await this.SetTextContent(this.InputText);
            this.HideIcon = false;
        }
        else
        {
            this.HideIcon = true;
            if (JS != null)
            {
                await JS.InvokeVoidAsync("setPlaceholder", this.PlcHoldText);
            }
        }
        this.IsVisibleSpinner = false;
        StateHasChanged();
    }
    private async Task RewriteContent()
    {
        this.ReplaceButtonText = "Replace";
        this.IsVisibleDialog = true;
        this.IsVisibleSpinner = true;
        this.EditorInputValue = this.InputText;
        StateHasChanged();
        await this.SetDefValue("cr");
        await this.SetTextContent(this.InputText);
        await this.OnRepharse();
        this.IsVisibleSpinner = false;
        StateHasChanged();
    }
    private async Task TranslateContent()
    {
        this.ReplaceButtonText = "Replace";
        this.IsVisibleDialog = true;
        this.IsVisibleSpinner = true;
        this.EditorInputValue = this.InputText;
        StateHasChanged();
        await this.SetDefValue("translate");
        await this.SetTextContent(this.InputText);
        this.IsVisibleSpinner = false;
    }
    private async Task GrammarCheck()
    {
        this.ReplaceButtonText = "Replace";
        this.IsVisibleDialog = true;
        this.IsVisibleSpinner = true;
        this.IsVisibleToolBar = false;
        this.IsVisibleChips = true;
        this.EditorInputValue = this.InputText;
        StateHasChanged();
        this.HeaderValue = "Grammar";
        await this.SetTextContent(this.InputText);
        await this.OnGrammerCheck();
        this.IsVisibleSpinner = false;
        if (JS != null)
        {
            await JS.InvokeVoidAsync("setDialogDivHeight", "");
        }
        StateHasChanged();
    }
    private async Task SetDefValue(string type)
    {
        if (JS != null)
        {
            await JS.InvokeVoidAsync("clearDivContent");
        }
        this.IsVisibleToolBar = true;
        this.IsVisibleChips = false;
        this.NumPage = "0";
        this.CurrentPage = 0;
        this.CROutList.Clear();
        this.CROutText = string.Empty;
        this.ToneValue = "Professional";
        this.FormatValue = "Paragraph";
        this.LengthValue = "Medium";
        this.ShowPryItem = true;
        this.ShowSecnyItem = false;
        this.TranslateValue = "French";
        if (type == "gc")
        {
            this.SplitterPaneHeight = "100%";
            this.ActionText = "Generate";
            this.TooltipText = "Generate the new content based on the provided text";
            this.TooltipTextSec = "Rewrite the content based on the provided text";
            this.IsContentGenerte = true;
            this.IsRephraseContent = false;
            this.ShowTrnsPryyItem = false;
            this.HeaderValue = "Generate Content";
            if (JS != null)
            {
                await JS.InvokeVoidAsync("setDialogDivHeight", "Generate");
            }
        }
        else if (type == "cr")
        {
            this.SplitterPaneHeight = "50%";
            this.ActionText = "Rewrite";
            this.TooltipText = "Replace the content into the document";
            this.TooltipTextSec = "Rewrite the content based on the provided text";
            this.HeaderValue = "AI Rephrase";
            this.IsContentGenerte = false;
            this.IsRephraseContent = true;
            this.ShowTrnsPryyItem = false;
            if (JS != null)
            {
                await JS.InvokeVoidAsync("setDialogDivHeight", "");
            }
        }
        else if (type == "translate")
        {
            this.SplitterPaneHeight = "50%";
            this.TooltipText = "Translate the content to the selected language";
            this.HeaderValue = "AI Translate";
            this.IsContentGenerte = false;
            this.IsRephraseContent = false;
            this.ShowPryItem = false;
            this.ShowTrnsPryyItem = true;
            this.ShowSecnyItem = false;
            if (JS != null)
            {
                await JS.InvokeVoidAsync("setDialogDivHeight", "");
            }
        }
        StateHasChanged();
    }
    private void onOpen(PopupsOpenEventArgs args)
    {
        args.PreventFocus = true;
    }

    private async Task OnFocus()
    {
        if (JS != null)
        {
            await JS.InvokeVoidAsync("removePlaceholder", this.PlcHoldText);
        }
    }
    private void InputChange()
    {
        this.HideIcon = false;
    }
    private async Task OnBlur()
    {
        if (JS != null)
        {
            await JS.InvokeVoidAsync("setPlaceholder", this.PlcHoldText);
        }
    }
    private async Task GetPreSug()
    {
        int CurrentIndex = this.CROutList.IndexOf(this.CROutText);
        if (CurrentIndex - 1 >= 0)
        {
            this.CROutText = this.CROutList[CurrentIndex - 1];
        }
        await this.SetHtmlContent(this.CROutText);
        this.UpdateIndex();
    }
    private async Task GetNxtSug()
    {
        int CurrentIndex = this.CROutList.IndexOf(this.CROutText);
        if (CurrentIndex + 1 < this.CROutList.Count)
        {
            this.CROutText = this.CROutList[CurrentIndex + 1];
        }
        await this.SetHtmlContent(this.CROutText);
        this.UpdateIndex();
    }
    private async Task MoveToNext()
    {
        await OnChange.InvokeAsync("MoveToNextPara");
        this.EditorInputValue = this.InputText;
    }
    private async Task MoveToPrevious()
    {
        await OnChange.InvokeAsync("MoveToPreviousPara");
        this.EditorInputValue = this.InputText;
    }
    private void UpdateIndex()
    {
        this.CurrentPage = this.CROutList.IndexOf(this.CROutText) + 1;
        this.NumPage = this.CROutList.Count.ToString();
        StateHasChanged();
    }
    public async Task<string> GetTextContent()
    {
        if (JS != null)
        {
            return await JS.InvokeAsync<string>("getTextContent");
        }
        return string.Empty;
    }

    public async Task SetTextContent(string text)
    {
        if (JS != null)
        {
            await JS.InvokeVoidAsync("setTextContent", text);
        }
    }

    public async Task<string> GetHtmlContent()
    {
        if (JS != null)
        {
            return await JS.InvokeAsync<string>("getHtmlContent");
        }
        return string.Empty;
    }

    public async Task SetHtmlContent(string text)
    {
        if (JS != null)
        {
            await JS.InvokeVoidAsync("setHtmlContent", text);
        }
    }
    public void OnItemStgClick()
    {
        this.ShowPryItem = false;
        this.ShowSecnyItem = true;
    }
    public void OnItemCancelClick()
    {
        this.ShowPryItem = true;
        this.ShowSecnyItem = false;
    }
    private async Task ReGenerate()
    {
        this.HideIcon = false;
        await this.OnRepharse();
    }
    private async Task Translate()
    {
        this.IsVisibleSpinner = true;
        string text = await this.GetTextContent();
        if (text == "")
        {
            return;
        }
        string SystemPrompt = $"You are a helpful assistant. Your task is to translate the provided text into `{this.TranslateValue}`. Always respond in proper HTML format, excluding <html> and <head> tags.";
        string Out = await RephraseText(SystemPrompt, text);
        await this.SetHtmlContent(Out);
        this.CROutText = Out;
        if (this.CROutText == "")
        {
            this.HideSecIcon = true;
        }
        else
        {
            this.HideSecIcon = false;
        }
        this.IsVisibleSpinner = false;
    }
    private async Task OnReGenerate()
    {
        this.HideIcon = false;
        if (await this.OnRepharse())
        {
            this.ActionText = "Rewrite";
            this.TooltipText = "Insert the content into the document";
        }
    }
    private async Task OnInsert()
    {
        PreviousType = string.Empty;
        await OnChange.InvokeAsync(this.CROutText);
        this.CROutText = string.Empty;
        this.CROutList.Clear();
        if (JS != null)
        {
            await JS.InvokeVoidAsync("clearDivContent");
        }
        this.IsVisibleDialog = false;
        StateHasChanged();
    }
    private async Task<bool> OnRepharse()
    {
        this.IsVisibleSpinner = true;
        string text = await this.GetTextContent();
        if (text == "")
        {
            return false;
        }
        this.CRInText = text;
        this.CROutText = string.Empty;
        this.CROutList.Clear();
        string SystemPrompt = string.Empty;
        if (this.IsRephraseContent)
        {
            SystemPrompt = $"You are a helpful assistant. Your task is to analyze the provided text and rephrase it. Please adjust the text to reflect a tone of '{this.ToneValue}', formatted in '{this.FormatValue}' style, and maintain a length of '{this.LengthValue}'. Always respond in proper HTML format, excluding <html>, <head>, and <body> tags.";
        }
        else if (this.IsContentGenerte)
        {
            this.IsContentGenerte = false;
            this.IsRephraseContent = true;
            SystemPrompt = $"You are a helpful assistant. Your task is to generate content based on the provided text. Please adjust the content to reflect a tone of '{this.ToneValue}', formatted in '{this.FormatValue}' style, and maintain a length of '{this.LengthValue}'. Always respond in proper HTML format, excluding <html>, <head>, and <body> tags.";
        }
        StateHasChanged();
        for (int i = 0; i < 3; i++)
        {
            string Out = await RephraseText(SystemPrompt, text);
            if (!this.CROutList.Contains(Out))
            {
                this.CROutList.Add(Out);
            }
        }
        await this.SetHtmlContent(this.CROutList[0]);
        this.CROutText = this.CROutList[0];
        this.UpdateIndex();
        this.IsVisibleSpinner = false;
        if (this.CROutList.Count == 0)
        {
            this.HideSecIcon = true;
        }
        else
        {
            this.HideSecIcon = false;
        }
        return true;
    }
    private async Task OnInsertTrnsText()
    {
        await this.OnInsert();
    }
    private async Task OnReCheck()
    {
        await this.OnGrammerCheck();
    }
    private async Task OnGrammerCheck()
    {
        this.IsVisibleSpinner = true;
        string systemPrompt = string.Empty;
        string value = string.Empty;
        string userPrompt = await this.GetTextContent();
        if (userPrompt == "")
        {
            userPrompt = this.InputText;
        }
        if (this.FilterSelected.Length > 0)
        {
            foreach (var item in this.FilterSelected)
            {
                value += item + ", ";
            }
            systemPrompt = $"You are a helpful assistant. Your task is to analyze the provided text and perform the following grammar checks: {value}. Please ensure that the revised text reflects these corrections. Always respond in proper HTML format, but do not include <html>, <head>, or <body> tags.";
        }
        else
        {
            systemPrompt = $"You are a helpful assistant. Your task is to analyze the provided text, check for and correct any grammatical errors, and rephrase it. Always respond in proper HTML format, but do not include <html>, <head>, or <body> tags.";
        }
        string Out = await OpenAIService.GetCompletionAsync(userPrompt, false, false, systemPrompt);
        this.CROutText = Out;
        if (Out == "")
        {
            this.HideSecIcon = true;
        }
        else
        {
            this.HideSecIcon = false;
        }
        await this.SetHtmlContent(Out);
        this.IsVisibleSpinner = false;
    }
    private async Task OnCancel()
    {
        PreviousType = string.Empty;
        this.IsVisibleDialog = false;
        if (JS != null)
        {
            await JS.InvokeVoidAsync("clearDivContent");
        }
        StateHasChanged();
    }
    public async Task CreateEmbeddingChunks(string[] chunks)
    {
        PageEmbeddings = chunks.Select(x => KeyValuePair.Create(x, embedder.Embed(x))).ToDictionary(k => k.Key, v => v.Value);
    }
    public async Task<string> GetResponseFromOpenAI(string systemPrompt, string message)
    {
        return await OpenAIService.GetCompletionAsync(message, false, false, systemPrompt);
    }

    public async Task LoadDocument(string document)
    {
        extractedText.Clear();
        extractedText.Add(document);
        await this.CreateEmbeddingChunks(extractedText.ToArray());
    }

    public async Task<string> GetDocumentSummary()
    {
        var userPrompt = extractedText.Take(1);
        string systemPrompt = "You are a helpful assistant. Your task is to analyze the provided text and generate short summary. Always respond in proper HTML format, but do not include <html>, <head>, or <body> tags.";
        return await OpenAIService.GetCompletionAsync(String.Join(" ", userPrompt), false, false, systemPrompt);
    }

    public async Task<string> RephraseText(string systemPrompt, string userPrompt)
    {
        return await OpenAIService.GetCompletionAsync(userPrompt, false, false, systemPrompt);
    }


    public async Task<string> GetAnswer(string systemPrompt, string question)
    {
        var questionEmbedding = embedder.Embed(question);
        var results = LocalEmbedder.FindClosest(questionEmbedding, PageEmbeddings.Select(x => (x.Key, x.Value)), 2);
        var answer = await OpenAIService.GetCompletionAsync(question, false, false, systemPrompt + string.Join(" --- ", results));
        return answer;
    }

}
<script>
    window.setDialogDivHeight = (element) => {
        var qusElement = document.getElementById('e-de-qus-pane');
        var ansElement = document.getElementById('e-de-editableDiv');
        if (element === 'Generate' && ansElement) {
            ansElement.style.height = '100px';
        } else if (qusElement && ansElement) {
            qusElement.style.height = '75px';
            ansElement.style.height = '75px';
        }
    }
    window.getTextContent = () => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            return element.textContent ? element.textContent.trim() : '';
        }
    };
    window.getHtmlContent = () => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            return element.innerHTML;
        }
    };
    window.setTextContent = (text) => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            element.textContent = text;
        }
    };
    window.setHtmlContent = (html) => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            element.innerHTML = html;
        }
    };
    window.clearDivContent = () => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            element.innerHTML = '';
        }
    };
    window.setPlaceholder = (placeholderText) => {
        var element = document.getElementById('e-de-editableDiv');
        if (element && element.innerText.trim() === '') {
            element.innerText = placeholderText;
            element.classList.add('placeHoldr');
        }
    };
    window.removePlaceholder = (placeholderText) => {
        var element = document.getElementById('e-de-editableDiv');
        if (element) {
            if (element.innerText === placeholderText) {
                element.innerText = '';
                element.classList.remove('placeHoldr');
            }
        }
    };
</script>